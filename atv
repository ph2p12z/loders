local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local g = 155
local h = math.rad(30)
local deceleration = 0.9
local isActive = false
local trackedParts = {}
local connections = {}

local partConfig = {
    {partName = "Plastics", partSize = Vector3.new(7.551962852478027, 2.7462241649627686, 4.972546577453613)},
    
}

local function isMatchingPart(part)
    for _, config in ipairs(partConfig) do 
        if part:IsA("BasePart") and part.Name == config.partName and part.Size == config.partSize then
            return true
        end
    end
    return false
end

local function flattenVector(v)
    return Vector3.new(v.X, 0, v.Z).unit * v.magnitude
end

local function controlPart(part)
    local velocity = Vector3.new(0, 0, 0)
    local orientation = CFrame.new()
    if not UserInputService:GetFocusedTextBox() and isActive then
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then velocity += flattenVector(Camera.CFrame.LookVector) * g end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then velocity -= flattenVector(Camera.CFrame.RightVector) * g end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then velocity -= flattenVector(Camera.CFrame.LookVector) * g end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then velocity += flattenVector(Camera.CFrame.RightVector) * g end
        if UserInputService:IsKeyDown(Enum.KeyCode.F) then velocity += Vector3.new(0, g, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.V) then velocity -= Vector3.new(0, g, 0) end

        part.Velocity = velocity.Magnitude > 0 and velocity or part.Velocity * deceleration
    else
        part.Velocity = part.Velocity * deceleration
        if part.Velocity.Magnitude < 1 then
            part.Velocity = Vector3.new()
        end
        part.RotVelocity = Vector3.new()
    end
end


local ScreenGui = Instance.new("ScreenGui", LocalPlayer.PlayerGui)
local ToggleButton = Instance.new("TextButton", ScreenGui)
ToggleButton.Size = UDim2.new(0, 100, 0, 50)
ToggleButton.Position = UDim2.new(0.5, -50, 0.5, -25) 
ToggleButton.Text = "Toggle"
ToggleButton.BackgroundColor3 = Color3.fromRGB(85, 170, 255)
ToggleButton.AnchorPoint = Vector2.new(0.5, 0.5)


local dragging = false
local dragStart
local startPos

ToggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = ToggleButton.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

ToggleButton.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        ToggleButton.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

ToggleButton.MouseButton1Click:Connect(function()
    isActive = not isActive
    ToggleButton.Text = isActive and "Active" or "Inactive"

    if isActive then
        for _, part in ipairs(trackedParts) do
            part.Anchored = false
            local connection = RunService.Heartbeat:Connect(function() controlPart(part) end)
            table.insert(connections, connection)
        end
    else
        for _, connection in ipairs(connections) do
            connection:Disconnect()
        end
        connections = {}
    end
end)


workspace.DescendantAdded:Connect(function(descendant)
    if isMatchingPart(descendant) then
        table.insert(trackedParts, descendant)
    end
end)

workspace.DescendantRemoving:Connect(function(descendant)
    for i, part in ipairs(trackedParts) do
        if part == descendant then
            table.remove(trackedParts, i)
            break
        end
    end
end)

for _, descendant in ipairs(workspace:GetDescendants()) do
    if isMatchingPart(descendant) then
        table.insert(trackedParts, descendant)
    end
end
